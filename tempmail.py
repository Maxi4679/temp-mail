# –ê–≤—Ç–æ—Ä (C) @theSmartBisnu
# –ö–∞–Ω–∞–ª: https://t.me/itsSmartDev

import hashlib
import time
import re
import requests
import random
import string
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = ''  # –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
user_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
token_map = {}

# –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –ø–æ—á—Ç—ã
user_tokens = {}
MAX_MESSAGE_LENGTH = 4000

BASE_URL = "https://api.mail.tm"
HEADERS = {
    "Content-Type": "application/json",
    "Accept": "application/json"
}

def short_id_generator(email):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ email –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    unique_string = email + str(time.time())
    return hashlib.md5(unique_string.encode()).hexdigest()[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ MD5 —Ö–µ—à–∞

def generate_random_username(length=8):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    return ''.join(random.choice(string.ascii_lowercase) for i in range(length))

def generate_random_password(length=12):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã."""
    characters = string.ascii_letters + string.digits + string.punctuation
    return ''.join(random.choice(characters) for i in range(length))

def get_domain():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–æ–º–µ–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã."""
    response = requests.get(f"{BASE_URL}/domains", headers=HEADERS)
    data = response.json()
    if isinstance(data, list) and data:
        return data[0]['domain']
    elif 'hydra:member' in data and data['hydra:member']:
        return data['hydra:member'][0]['domain']
    return None

def create_account(email, password):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã."""
    data = {
        "address": email,
        "password": password
    }
    response = requests.post(f"{BASE_URL}/accounts", headers=HEADERS, json=data)
    if response.status_code in [200, 201]:
        return response.json()
    else:
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç: {response.text}")
        return None

def get_token(email, password):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    data = {
        "address": email,
        "password": password
    }
    response = requests.post(f"{BASE_URL}/token", headers=HEADERS, json=data)
    if response.status_code == 200:
        return response.json().get('token')
    else:
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏ —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
        print(f"–û—Ç–≤–µ—Ç —Ç–æ–∫–µ–Ω–∞: {response.text}")
        return None

def get_text_from_html(html_content_list):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ HTML-—Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."""
    html_content = ''.join(html_content_list)
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Ç–µ–≥–æ–≤ anchor –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ —Ç–µ–∫—Å—Ç—É anchor
    for a_tag in soup.find_all('a', href=True):
        url = a_tag['href']
        new_content = f"{a_tag.text} [{url}]"
        a_tag.string = new_content

    text_content = soup.get_text()
    cleaned_content = re.sub(r'\s+', ' ', text_content).strip()
    return cleaned_content

def list_messages(token):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Bearer {token}"
    }
    response = requests.get(f"{BASE_URL}/messages", headers=headers)
    data = response.json()
    if isinstance(data, list):
        return data
    elif 'hydra:member' in data:
        return data['hydra:member']
    else:
        return []

@dp.message_handler(commands=['tmail'])  # –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É tmail
async def generate_mail(message: types.Message):
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "<b>‚ùå –ë—Ä–æ, —Ñ—É–Ω–∫—Ü–∏—è TempMail —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ.</b>", parse_mode="html")
        return

    if not message.text.startswith(('/tmail', '.tmail')):
        return

    loading_msg = await message.answer("<b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—à—É –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É...</b>", parse_mode='html')

    args_text = ""
    if message.text.startswith('/tmail'):
        args_text = message.get_args()
    elif message.text.startswith('.tmail'):
        args_text = message.text.replace('.tmail', '').strip()

    args = args_text.split()
    if len(args) == 1 and ':' in args[0]:
        username, password = args[0].split(':')
    else:
        username = generate_random_username()
        password = generate_random_password()

    domain = get_domain()
    if not domain:
        await message.answer("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>", parse_mode='html')
        await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)
        return

    email = f"{username}@{domain}"
    account = create_account(email, password)
    if not account:
        await message.answer("<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ.</b>", parse_mode='html')
        await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)
        return

    time.sleep(2)

    token = get_token(email, password)
    if not token:
        await message.answer("<b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.</b>", parse_mode='html')
        await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)
        return

    # –í–º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–ª–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π id
    short_id = short_id_generator(email)
    token_map[short_id] = token  # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID —Å —Ç–æ–∫–µ–Ω–æ–º

    output_message = (
        "<b>üìß –î–µ—Ç–∞–ª–∏ Smart-Email üìß</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        f"üìß Email: <code>{email}</code>\n"
        f"üîë –ü–∞—Ä–æ–ª—å: <code>{password}</code>\n"
        f"üîí –¢–æ–∫–µ–Ω: <code>{token}</code>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        "<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—á—Ç–µ</b>"
    )

    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É", callback_data=f"check_{short_id}")
    keyboard.add(button)

    await message.answer(output_message, reply_markup=keyboard, parse_mode='html')
    await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)

@dp.callback_query_handler(lambda c: c.data.startswith('check_'))
async def check_mail(callback_query: types.CallbackQuery):
    short_id = callback_query.data.split('_')[1]
    token = token_map.get(short_id)
    if not token:
        await callback_query.message.answer("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmail —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ user_tokens –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ read_message
    user_tokens[callback_query.from_user.id] = token

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await callback_query.message.answer("<code>‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É.. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</code>", parse_mode='html')

    messages = list_messages(token)
    if not messages:
        await callback_query.message.answer("<b>‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.</b>", parse_mode='html')
        await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=loading_msg.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        return

    output = "üìß <b>–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Smart-Mail</b> üìß\n"
    output += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    keyboard = InlineKeyboardMarkup(row_width=5)
    buttons = []
    for idx, msg in enumerate(messages[:10], 1):
        output += f"<b>{idx}. –û—Ç: <code>{msg['from']['address']}</code> - –¢–µ–º–∞: {msg['subject']}</b>\n"
        button = InlineKeyboardButton(f"{idx}", callback_data=f"read_{msg['id']}")
        buttons.append(button)
    
    for i in range(0, len(buttons), 5):
        keyboard.row(*buttons[i:i+5])

    await callback_query.message.answer(output, reply_markup=keyboard, parse_mode='html')
    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=loading_msg.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ

@dp.message_handler(commands=['cmail']) # –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É cmail
async def manual_check_mail(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø —á–∞—Ç–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º
    if message.chat.type != 'private':
        await bot.send_message(message.chat.id, "<b>‚ùå –ë—Ä–æ, —Ñ—É–Ω–∫—Ü–∏—è TempMail —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ</b>", parse_mode="html")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await bot.send_message(message.chat.id, "<code>‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É.. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.</code>", parse_mode='html')

    token = message.get_args()
    if not token:
        await message.answer("<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /cmail.</b>", parse_mode='html')
        await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        return

    user_tokens[message.from_user.id] = token
    messages = list_messages(token)
    if not messages:
        await message.answer("<b>‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω</b>", parse_mode='html')
        await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        return

    output = "üìß <b>–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Smart-Mail</b> üìß\n"
    output += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    
    keyboard = InlineKeyboardMarkup(row_width=5)
    buttons = []
    for idx, msg in enumerate(messages[:10], 1):
        output += f"<b>{idx}. –û—Ç: <code>{msg['from']['address']}</code> - –¢–µ–º–∞: {msg['subject']}</b>\n"
        button = InlineKeyboardButton(f"{idx}", callback_data=f"read_{msg['id']}")
        buttons.append(button)
    
    for i in range(0, len(buttons), 5):
        keyboard.row(*buttons[i:i+5])

    await message.answer(output, reply_markup=keyboard, parse_mode='html')
    await bot.delete_message(chat_id=message.chat.id, message_id=loading_msg.message_id)  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ

@dp.callback_query_handler(lambda c: c.data.startswith('read_'))
async def read_message(callback_query: types.CallbackQuery):   
    _, message_id = callback_query.data.split('_')
    
    token = user_tokens.get(callback_query.from_user.id)
    if not token:
        await bot.send_message(callback_query.message.chat.id, "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmail —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º —Å–Ω–æ–≤–∞.")
        return

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Bearer {token}"
    }
    response = requests.get(f"{BASE_URL}/messages/{message_id}", headers=headers)
    
    if response.status_code == 200:
        details = response.json()
        if 'html' in details:
            message_text = get_text_from_html(details['html'])
        elif 'text' in details:
            message_text = details['text']
        else:
            message_text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –≤ Telegram
        if len(message_text) > MAX_MESSAGE_LENGTH:
            message_text = message_text[:MAX_MESSAGE_LENGTH - 100] + "... [message truncated]"

@dp.callback_query_handler(lambda c: c.data.startswith('read_'))
async def read_message(callback_query: types.CallbackQuery):   
    _, message_id = callback_query.data.split('_')
    
    token = user_tokens.get(callback_query.from_user.id)
    if not token:
        await bot.send_message(callback_query.message.chat.id, "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cmail —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º —Å–Ω–æ–≤–∞.")
        return

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Bearer {token}"
    }
    response = requests.get(f"{BASE_URL}/messages/{message_id}", headers=headers)
    
    if response.status_code == 200:
        details = response.json()
        if 'html' in details:
            message_text = get_text_from_html(details['html'])
        elif 'text' in details:
            message_text = details['text']
        else:
            message_text = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –≤ Telegram
        if len(message_text) > MAX_MESSAGE_LENGTH:
            message_text = message_text[:MAX_MESSAGE_LENGTH - 100] + "... [—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"

        output = f"–û—Ç: {details['from']['address']}\n–¢–µ–º–∞: {details['subject']}\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n{message_text}"
        await bot.send_message(callback_query.message.chat.id, output, disable_web_page_preview=True)
    else:
        await bot.send_message(callback_query.message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
